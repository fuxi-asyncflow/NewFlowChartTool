//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../../NewFlowChartTool/FlowChart.Parser/g4/NodeParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FlowChart.Parser.NodeParser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="NodeParserParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public interface INodeParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>stat_assign</c>
	/// labeled alternative in <see cref="NodeParserParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat_assign([NotNull] NodeParserParser.Stat_assignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stat_assign</c>
	/// labeled alternative in <see cref="NodeParserParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat_assign([NotNull] NodeParserParser.Stat_assignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stat_expr</c>
	/// labeled alternative in <see cref="NodeParserParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStat_expr([NotNull] NodeParserParser.Stat_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stat_expr</c>
	/// labeled alternative in <see cref="NodeParserParser.stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStat_expr([NotNull] NodeParserParser.Stat_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_compare</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_compare([NotNull] NodeParserParser.Expr_compareContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_compare</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_compare([NotNull] NodeParserParser.Expr_compareContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_parenthesis</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_parenthesis([NotNull] NodeParserParser.Expr_parenthesisContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_parenthesis</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_parenthesis([NotNull] NodeParserParser.Expr_parenthesisContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_mulDiv</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_mulDiv([NotNull] NodeParserParser.Expr_mulDivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_mulDiv</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_mulDiv([NotNull] NodeParserParser.Expr_mulDivContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_container</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_container([NotNull] NodeParserParser.Expr_containerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_container</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_container([NotNull] NodeParserParser.Expr_containerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_atom</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_atom([NotNull] NodeParserParser.Expr_atomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_atom</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_atom([NotNull] NodeParserParser.Expr_atomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_strcat</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_strcat([NotNull] NodeParserParser.Expr_strcatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_strcat</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_strcat([NotNull] NodeParserParser.Expr_strcatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_func_with_caller</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_func_with_caller([NotNull] NodeParserParser.Expr_func_with_callerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_func_with_caller</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_func_with_caller([NotNull] NodeParserParser.Expr_func_with_callerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_addSub</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_addSub([NotNull] NodeParserParser.Expr_addSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_addSub</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_addSub([NotNull] NodeParserParser.Expr_addSubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_subscript</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_subscript([NotNull] NodeParserParser.Expr_subscriptContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_subscript</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_subscript([NotNull] NodeParserParser.Expr_subscriptContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_member</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_member([NotNull] NodeParserParser.Expr_memberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_member</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_member([NotNull] NodeParserParser.Expr_memberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_or</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_or([NotNull] NodeParserParser.Expr_orContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_or</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_or([NotNull] NodeParserParser.Expr_orContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_and</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_and([NotNull] NodeParserParser.Expr_andContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_and</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_and([NotNull] NodeParserParser.Expr_andContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_bitwise</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_bitwise([NotNull] NodeParserParser.Expr_bitwiseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_bitwise</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_bitwise([NotNull] NodeParserParser.Expr_bitwiseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_unary</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_unary([NotNull] NodeParserParser.Expr_unaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_unary</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_unary([NotNull] NodeParserParser.Expr_unaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_func_no_caller</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_func_no_caller([NotNull] NodeParserParser.Expr_func_no_callerContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_func_no_caller</c>
	/// labeled alternative in <see cref="NodeParserParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_func_no_caller([NotNull] NodeParserParser.Expr_func_no_callerContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atom_number</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom_number([NotNull] NodeParserParser.Atom_numberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atom_number</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom_number([NotNull] NodeParserParser.Atom_numberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atom_string</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom_string([NotNull] NodeParserParser.Atom_stringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atom_string</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom_string([NotNull] NodeParserParser.Atom_stringContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atom_variable</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom_variable([NotNull] NodeParserParser.Atom_variableContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atom_variable</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom_variable([NotNull] NodeParserParser.Atom_variableContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atom_true</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom_true([NotNull] NodeParserParser.Atom_trueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atom_true</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom_true([NotNull] NodeParserParser.Atom_trueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atom_false</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom_false([NotNull] NodeParserParser.Atom_falseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atom_false</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom_false([NotNull] NodeParserParser.Atom_falseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atom_nil</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom_nil([NotNull] NodeParserParser.Atom_nilContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atom_nil</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom_nil([NotNull] NodeParserParser.Atom_nilContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atom_self</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtom_self([NotNull] NodeParserParser.Atom_selfContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atom_self</c>
	/// labeled alternative in <see cref="NodeParserParser.atom_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtom_self([NotNull] NodeParserParser.Atom_selfContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.container_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterContainer_expr([NotNull] NodeParserParser.Container_exprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.container_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitContainer_expr([NotNull] NodeParserParser.Container_exprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_var_assign</c>
	/// labeled alternative in <see cref="NodeParserParser.assign_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_var_assign([NotNull] NodeParserParser.Expr_var_assignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_var_assign</c>
	/// labeled alternative in <see cref="NodeParserParser.assign_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_var_assign([NotNull] NodeParserParser.Expr_var_assignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_member_assign</c>
	/// labeled alternative in <see cref="NodeParserParser.assign_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_member_assign([NotNull] NodeParserParser.Expr_member_assignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_member_assign</c>
	/// labeled alternative in <see cref="NodeParserParser.assign_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_member_assign([NotNull] NodeParserParser.Expr_member_assignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expr_subscript_assign</c>
	/// labeled alternative in <see cref="NodeParserParser.assign_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr_subscript_assign([NotNull] NodeParserParser.Expr_subscript_assignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expr_subscript_assign</c>
	/// labeled alternative in <see cref="NodeParserParser.assign_stat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr_subscript_assign([NotNull] NodeParserParser.Expr_subscript_assignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument([NotNull] NodeParserParser.ArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument([NotNull] NodeParserParser.ArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.argumentlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentlist([NotNull] NodeParserParser.ArgumentlistContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.argumentlist"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentlist([NotNull] NodeParserParser.ArgumentlistContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.operatorUnary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorUnary([NotNull] NodeParserParser.OperatorUnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.operatorUnary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorUnary([NotNull] NodeParserParser.OperatorUnaryContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.operatorMulDivMod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorMulDivMod([NotNull] NodeParserParser.OperatorMulDivModContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.operatorMulDivMod"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorMulDivMod([NotNull] NodeParserParser.OperatorMulDivModContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.operatorAddSub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorAddSub([NotNull] NodeParserParser.OperatorAddSubContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.operatorAddSub"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorAddSub([NotNull] NodeParserParser.OperatorAddSubContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.operatorStrcat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorStrcat([NotNull] NodeParserParser.OperatorStrcatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.operatorStrcat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorStrcat([NotNull] NodeParserParser.OperatorStrcatContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.operatorBitwise"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorBitwise([NotNull] NodeParserParser.OperatorBitwiseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.operatorBitwise"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorBitwise([NotNull] NodeParserParser.OperatorBitwiseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.operatorComparison"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorComparison([NotNull] NodeParserParser.OperatorComparisonContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.operatorComparison"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorComparison([NotNull] NodeParserParser.OperatorComparisonContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.operatorAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorAnd([NotNull] NodeParserParser.OperatorAndContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.operatorAnd"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorAnd([NotNull] NodeParserParser.OperatorAndContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NodeParserParser.operatorOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperatorOr([NotNull] NodeParserParser.OperatorOrContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NodeParserParser.operatorOr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperatorOr([NotNull] NodeParserParser.OperatorOrContext context);
}
} // namespace FlowChart.Parser.NodeParser
