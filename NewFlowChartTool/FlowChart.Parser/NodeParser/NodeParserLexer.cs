//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../../NewFlowChartTool/FlowChart.Parser/g4/NodeParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FlowChart.Parser.NodeParser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class NodeParserLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, TRUE=24, FALSE=25, 
		NIL=26, SELF=27, ASSIGN=28, GT=29, LT=30, BANG=31, TILDE=32, QUESTION=33, 
		COLON=34, EQUAL=35, LE=36, GE=37, NOTEQUAL=38, AND=39, OR=40, ADD=41, 
		SUB=42, MUL=43, DIV=44, NAME=45, VARIABLE=46, STRING=47, NUMBER=48, DEC_INTEGER=49, 
		HEX_INTEGER=50, FLOAT_NUMBER=51;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "TRUE", "FALSE", 
		"NIL", "SELF", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
		"EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "ADD", "SUB", "MUL", "DIV", 
		"NAME", "VARIABLE", "STRING", "STRING_ESCAPE_SEQ", "NUMBER", "DEC_INTEGER", 
		"HEX_INTEGER", "FLOAT_NUMBER", "DIGIT", "HEX_DIGIT", "POINT_FLOAT", "EXPONENT_FLOAT", 
		"INT_PART", "FRACTION", "EXPONENT"
	};


	public NodeParserLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NodeParserLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'['", "']'", "'{'", "'}'", "','", "'not'", 
		"'#'", "'^'", "'%'", "'..'", "'&'", "'|'", "'<<'", "'>>'", "'~='", "'!='", 
		"'and'", "'&&'", "'or'", "'||'", "'true'", "'false'", "'nil'", "'self'", 
		"'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", "'>='", 
		null, null, null, "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"TRUE", "FALSE", "NIL", "SELF", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
		"QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "ADD", 
		"SUB", "MUL", "DIV", "NAME", "VARIABLE", "STRING", "NUMBER", "DEC_INTEGER", 
		"HEX_INTEGER", "FLOAT_NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NodeParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NodeParserLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,51,341,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
		1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,
		1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
		1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
		1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
		1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,3,37,226,8,37,1,38,1,38,1,38,1,
		38,1,38,3,38,233,8,38,1,39,1,39,1,39,1,39,3,39,239,8,39,1,40,1,40,1,41,
		1,41,1,42,1,42,1,43,1,43,1,44,1,44,5,44,251,8,44,10,44,12,44,254,9,44,
		1,45,1,45,1,45,1,46,1,46,1,46,5,46,262,8,46,10,46,12,46,265,9,46,1,46,
		1,46,1,46,1,46,5,46,271,8,46,10,46,12,46,274,9,46,1,46,3,46,277,8,46,1,
		47,1,47,1,47,1,48,1,48,1,48,3,48,285,8,48,1,49,4,49,288,8,49,11,49,12,
		49,289,1,50,1,50,1,50,4,50,295,8,50,11,50,12,50,296,1,51,1,51,3,51,301,
		8,51,1,52,1,52,1,53,1,53,1,54,3,54,308,8,54,1,54,1,54,1,54,1,54,3,54,314,
		8,54,1,55,1,55,3,55,318,8,55,1,55,1,55,1,56,4,56,323,8,56,11,56,12,56,
		324,1,57,1,57,4,57,329,8,57,11,57,12,57,330,1,58,1,58,3,58,335,8,58,1,
		58,4,58,338,8,58,11,58,12,58,339,0,0,59,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
		87,44,89,45,91,46,93,47,95,0,97,48,99,49,101,50,103,51,105,0,107,0,109,
		0,111,0,113,0,115,0,117,0,1,0,9,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
		95,95,97,122,4,0,10,10,12,13,39,39,92,92,4,0,10,10,12,13,34,34,92,92,2,
		0,88,88,120,120,1,0,48,57,3,0,48,57,65,70,97,102,2,0,69,69,101,101,2,0,
		43,43,45,45,353,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,97,1,0,0,0,0,99,
		1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,1,119,1,0,0,0,3,121,1,0,0,0,5,123,
		1,0,0,0,7,125,1,0,0,0,9,127,1,0,0,0,11,129,1,0,0,0,13,131,1,0,0,0,15,133,
		1,0,0,0,17,135,1,0,0,0,19,139,1,0,0,0,21,141,1,0,0,0,23,143,1,0,0,0,25,
		145,1,0,0,0,27,148,1,0,0,0,29,150,1,0,0,0,31,152,1,0,0,0,33,155,1,0,0,
		0,35,158,1,0,0,0,37,161,1,0,0,0,39,164,1,0,0,0,41,168,1,0,0,0,43,171,1,
		0,0,0,45,174,1,0,0,0,47,177,1,0,0,0,49,182,1,0,0,0,51,188,1,0,0,0,53,192,
		1,0,0,0,55,197,1,0,0,0,57,199,1,0,0,0,59,201,1,0,0,0,61,203,1,0,0,0,63,
		205,1,0,0,0,65,207,1,0,0,0,67,209,1,0,0,0,69,211,1,0,0,0,71,214,1,0,0,
		0,73,217,1,0,0,0,75,225,1,0,0,0,77,232,1,0,0,0,79,238,1,0,0,0,81,240,1,
		0,0,0,83,242,1,0,0,0,85,244,1,0,0,0,87,246,1,0,0,0,89,248,1,0,0,0,91,255,
		1,0,0,0,93,276,1,0,0,0,95,278,1,0,0,0,97,284,1,0,0,0,99,287,1,0,0,0,101,
		291,1,0,0,0,103,300,1,0,0,0,105,302,1,0,0,0,107,304,1,0,0,0,109,313,1,
		0,0,0,111,317,1,0,0,0,113,322,1,0,0,0,115,326,1,0,0,0,117,332,1,0,0,0,
		119,120,5,40,0,0,120,2,1,0,0,0,121,122,5,41,0,0,122,4,1,0,0,0,123,124,
		5,46,0,0,124,6,1,0,0,0,125,126,5,91,0,0,126,8,1,0,0,0,127,128,5,93,0,0,
		128,10,1,0,0,0,129,130,5,123,0,0,130,12,1,0,0,0,131,132,5,125,0,0,132,
		14,1,0,0,0,133,134,5,44,0,0,134,16,1,0,0,0,135,136,5,110,0,0,136,137,5,
		111,0,0,137,138,5,116,0,0,138,18,1,0,0,0,139,140,5,35,0,0,140,20,1,0,0,
		0,141,142,5,94,0,0,142,22,1,0,0,0,143,144,5,37,0,0,144,24,1,0,0,0,145,
		146,5,46,0,0,146,147,5,46,0,0,147,26,1,0,0,0,148,149,5,38,0,0,149,28,1,
		0,0,0,150,151,5,124,0,0,151,30,1,0,0,0,152,153,5,60,0,0,153,154,5,60,0,
		0,154,32,1,0,0,0,155,156,5,62,0,0,156,157,5,62,0,0,157,34,1,0,0,0,158,
		159,5,126,0,0,159,160,5,61,0,0,160,36,1,0,0,0,161,162,5,33,0,0,162,163,
		5,61,0,0,163,38,1,0,0,0,164,165,5,97,0,0,165,166,5,110,0,0,166,167,5,100,
		0,0,167,40,1,0,0,0,168,169,5,38,0,0,169,170,5,38,0,0,170,42,1,0,0,0,171,
		172,5,111,0,0,172,173,5,114,0,0,173,44,1,0,0,0,174,175,5,124,0,0,175,176,
		5,124,0,0,176,46,1,0,0,0,177,178,5,116,0,0,178,179,5,114,0,0,179,180,5,
		117,0,0,180,181,5,101,0,0,181,48,1,0,0,0,182,183,5,102,0,0,183,184,5,97,
		0,0,184,185,5,108,0,0,185,186,5,115,0,0,186,187,5,101,0,0,187,50,1,0,0,
		0,188,189,5,110,0,0,189,190,5,105,0,0,190,191,5,108,0,0,191,52,1,0,0,0,
		192,193,5,115,0,0,193,194,5,101,0,0,194,195,5,108,0,0,195,196,5,102,0,
		0,196,54,1,0,0,0,197,198,5,61,0,0,198,56,1,0,0,0,199,200,5,62,0,0,200,
		58,1,0,0,0,201,202,5,60,0,0,202,60,1,0,0,0,203,204,5,33,0,0,204,62,1,0,
		0,0,205,206,5,126,0,0,206,64,1,0,0,0,207,208,5,63,0,0,208,66,1,0,0,0,209,
		210,5,58,0,0,210,68,1,0,0,0,211,212,5,61,0,0,212,213,5,61,0,0,213,70,1,
		0,0,0,214,215,5,60,0,0,215,216,5,61,0,0,216,72,1,0,0,0,217,218,5,62,0,
		0,218,219,5,61,0,0,219,74,1,0,0,0,220,221,5,33,0,0,221,226,5,61,0,0,222,
		223,5,110,0,0,223,224,5,111,0,0,224,226,5,116,0,0,225,220,1,0,0,0,225,
		222,1,0,0,0,226,76,1,0,0,0,227,228,5,38,0,0,228,233,5,38,0,0,229,230,5,
		97,0,0,230,231,5,110,0,0,231,233,5,100,0,0,232,227,1,0,0,0,232,229,1,0,
		0,0,233,78,1,0,0,0,234,235,5,124,0,0,235,239,5,124,0,0,236,237,5,111,0,
		0,237,239,5,114,0,0,238,234,1,0,0,0,238,236,1,0,0,0,239,80,1,0,0,0,240,
		241,5,43,0,0,241,82,1,0,0,0,242,243,5,45,0,0,243,84,1,0,0,0,244,245,5,
		42,0,0,245,86,1,0,0,0,246,247,5,47,0,0,247,88,1,0,0,0,248,252,7,0,0,0,
		249,251,7,1,0,0,250,249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,
		1,0,0,0,253,90,1,0,0,0,254,252,1,0,0,0,255,256,5,36,0,0,256,257,3,89,44,
		0,257,92,1,0,0,0,258,263,5,39,0,0,259,262,3,95,47,0,260,262,8,2,0,0,261,
		259,1,0,0,0,261,260,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,
		0,0,0,264,266,1,0,0,0,265,263,1,0,0,0,266,277,5,39,0,0,267,272,5,34,0,
		0,268,271,3,95,47,0,269,271,8,3,0,0,270,268,1,0,0,0,270,269,1,0,0,0,271,
		274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,275,1,0,0,0,274,272,1,
		0,0,0,275,277,5,34,0,0,276,258,1,0,0,0,276,267,1,0,0,0,277,94,1,0,0,0,
		278,279,5,92,0,0,279,280,9,0,0,0,280,96,1,0,0,0,281,285,3,99,49,0,282,
		285,3,101,50,0,283,285,3,103,51,0,284,281,1,0,0,0,284,282,1,0,0,0,284,
		283,1,0,0,0,285,98,1,0,0,0,286,288,3,105,52,0,287,286,1,0,0,0,288,289,
		1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,100,1,0,0,0,291,292,5,48,0,
		0,292,294,7,4,0,0,293,295,3,107,53,0,294,293,1,0,0,0,295,296,1,0,0,0,296,
		294,1,0,0,0,296,297,1,0,0,0,297,102,1,0,0,0,298,301,3,109,54,0,299,301,
		3,111,55,0,300,298,1,0,0,0,300,299,1,0,0,0,301,104,1,0,0,0,302,303,7,5,
		0,0,303,106,1,0,0,0,304,305,7,6,0,0,305,108,1,0,0,0,306,308,3,113,56,0,
		307,306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,314,3,115,57,0,310,
		311,3,113,56,0,311,312,5,46,0,0,312,314,1,0,0,0,313,307,1,0,0,0,313,310,
		1,0,0,0,314,110,1,0,0,0,315,318,3,113,56,0,316,318,3,109,54,0,317,315,
		1,0,0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,320,3,117,58,0,320,112,1,0,
		0,0,321,323,3,105,52,0,322,321,1,0,0,0,323,324,1,0,0,0,324,322,1,0,0,0,
		324,325,1,0,0,0,325,114,1,0,0,0,326,328,5,46,0,0,327,329,3,105,52,0,328,
		327,1,0,0,0,329,330,1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,116,1,
		0,0,0,332,334,7,7,0,0,333,335,7,8,0,0,334,333,1,0,0,0,334,335,1,0,0,0,
		335,337,1,0,0,0,336,338,3,105,52,0,337,336,1,0,0,0,338,339,1,0,0,0,339,
		337,1,0,0,0,339,340,1,0,0,0,340,118,1,0,0,0,21,0,225,232,238,252,261,263,
		270,272,276,284,289,296,300,307,313,317,324,330,334,339,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FlowChart.Parser.NodeParser
