//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../../NewFlowChartTool/FlowChart.Parser/g4/NodeParser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FlowChart.Parser.NodeParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class NodeParserParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, TRUE=24, FALSE=25, 
		NIL=26, SELF=27, ASSIGN=28, GT=29, LT=30, BANG=31, TILDE=32, QUESTION=33, 
		COLON=34, EQUAL=35, LE=36, GE=37, NOTEQUAL=38, AND=39, OR=40, ADD=41, 
		SUB=42, MUL=43, DIV=44, NAME=45, VARIABLE=46, STRING=47, NUMBER=48, DEC_INTEGER=49, 
		HEX_INTEGER=50, FLOAT_NUMBER=51, COMMENT=52, LINE_COMMENT=53, WS=54;
	public const int
		RULE_stat = 0, RULE_expr = 1, RULE_atom_expr = 2, RULE_container_expr = 3, 
		RULE_assign_stat = 4, RULE_argument = 5, RULE_argumentlist = 6, RULE_operatorUnary = 7, 
		RULE_operatorMulDivMod = 8, RULE_operatorAddSub = 9, RULE_operatorStrcat = 10, 
		RULE_operatorBitwise = 11, RULE_operatorComparison = 12, RULE_operatorAnd = 13, 
		RULE_operatorOr = 14;
	public static readonly string[] ruleNames = {
		"stat", "expr", "atom_expr", "container_expr", "assign_stat", "argument", 
		"argumentlist", "operatorUnary", "operatorMulDivMod", "operatorAddSub", 
		"operatorStrcat", "operatorBitwise", "operatorComparison", "operatorAnd", 
		"operatorOr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'.'", "'['", "']'", "'{'", "'}'", "','", "'not'", 
		"'#'", "'^'", "'%'", "'..'", "'&'", "'|'", "'<<'", "'>>'", "'~='", "'!='", 
		"'and'", "'&&'", "'or'", "'||'", null, null, "'nil'", null, "'='", "'>'", 
		"'<'", "'!'", "'~'", "'?'", "':'", "'=='", "'<='", "'>='", null, null, 
		null, "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"TRUE", "FALSE", "NIL", "SELF", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
		"QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "ADD", 
		"SUB", "MUL", "DIV", "NAME", "VARIABLE", "STRING", "NUMBER", "DEC_INTEGER", 
		"HEX_INTEGER", "FLOAT_NUMBER", "COMMENT", "LINE_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NodeParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NodeParserParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NodeParserParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NodeParserParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Stat_assignContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assign_statContext assign_stat() {
			return GetRuleContext<Assign_statContext>(0);
		}
		public Stat_assignContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterStat_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitStat_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_assign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Stat_exprContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_exprContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterStat_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitStat_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 0, RULE_stat);
		try {
			State = 32;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				_localctx = new Stat_assignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 30;
				assign_stat();
				}
				break;
			case 2:
				_localctx = new Stat_exprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 31;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_compareContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorComparisonContext operatorComparison() {
			return GetRuleContext<OperatorComparisonContext>(0);
		}
		public Expr_compareContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_compare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_compare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_compare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_parenthesisContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_parenthesisContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_parenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_parenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_parenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_nameContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NodeParserParser.NAME, 0); }
		public Expr_nameContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_name(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_containerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Container_exprContext container_expr() {
			return GetRuleContext<Container_exprContext>(0);
		}
		public Expr_containerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_container(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_container(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_container(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_atomContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Atom_exprContext atom_expr() {
			return GetRuleContext<Atom_exprContext>(0);
		}
		public Expr_atomContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_atom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_atom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_strcatContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorStrcatContext operatorStrcat() {
			return GetRuleContext<OperatorStrcatContext>(0);
		}
		public Expr_strcatContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_strcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_strcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_strcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_func_with_callerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NodeParserParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentlistContext argumentlist() {
			return GetRuleContext<ArgumentlistContext>(0);
		}
		public Expr_func_with_callerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_func_with_caller(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_func_with_caller(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_func_with_caller(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_mul_divContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorMulDivModContext operatorMulDivMod() {
			return GetRuleContext<OperatorMulDivModContext>(0);
		}
		public Expr_mul_divContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_mul_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_mul_div(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_mul_div(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_subscriptContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Expr_subscriptContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_subscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_subscript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_subscript(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_memberContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NodeParserParser.NAME, 0); }
		public Expr_memberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_member(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_member(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_orContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorOrContext operatorOr() {
			return GetRuleContext<OperatorOrContext>(0);
		}
		public Expr_orContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_or(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_or(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_andContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAndContext operatorAnd() {
			return GetRuleContext<OperatorAndContext>(0);
		}
		public Expr_andContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_and(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_and(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_bitwiseContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorBitwiseContext operatorBitwise() {
			return GetRuleContext<OperatorBitwiseContext>(0);
		}
		public Expr_bitwiseContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_bitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_bitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_bitwise(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_add_subContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperatorAddSubContext operatorAddSub() {
			return GetRuleContext<OperatorAddSubContext>(0);
		}
		public Expr_add_subContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_add_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_add_sub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_add_sub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_unaryContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public OperatorUnaryContext operatorUnary() {
			return GetRuleContext<OperatorUnaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_unaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_unary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_func_no_callerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NodeParserParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentlistContext argumentlist() {
			return GetRuleContext<ArgumentlistContext>(0);
		}
		public Expr_func_no_callerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_func_no_caller(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_func_no_caller(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_func_no_caller(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new Expr_atomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 35;
				atom_expr();
				}
				break;
			case 2:
				{
				_localctx = new Expr_nameContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 36;
				Match(NAME);
				}
				break;
			case 3:
				{
				_localctx = new Expr_containerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 37;
				container_expr();
				}
				break;
			case 4:
				{
				_localctx = new Expr_parenthesisContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 38;
				Match(T__0);
				State = 39;
				expr(0);
				State = 40;
				Match(T__1);
				}
				break;
			case 5:
				{
				_localctx = new Expr_func_no_callerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42;
				Match(NAME);
				State = 43;
				Match(T__0);
				State = 44;
				argumentlist();
				State = 45;
				Match(T__1);
				}
				break;
			case 6:
				{
				_localctx = new Expr_unaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 47;
				operatorUnary();
				State = 48;
				expr(8);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 95;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new Expr_mul_divContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 52;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 53;
						operatorMulDivMod();
						State = 54;
						expr(8);
						}
						break;
					case 2:
						{
						_localctx = new Expr_add_subContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 56;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 57;
						operatorAddSub();
						State = 58;
						expr(7);
						}
						break;
					case 3:
						{
						_localctx = new Expr_compareContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 60;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 61;
						operatorComparison();
						State = 62;
						expr(6);
						}
						break;
					case 4:
						{
						_localctx = new Expr_strcatContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 64;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 65;
						operatorStrcat();
						State = 66;
						expr(5);
						}
						break;
					case 5:
						{
						_localctx = new Expr_andContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 68;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 69;
						operatorAnd();
						State = 70;
						expr(4);
						}
						break;
					case 6:
						{
						_localctx = new Expr_orContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 72;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 73;
						operatorOr();
						State = 74;
						expr(3);
						}
						break;
					case 7:
						{
						_localctx = new Expr_bitwiseContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 76;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 77;
						operatorBitwise();
						State = 78;
						expr(2);
						}
						break;
					case 8:
						{
						_localctx = new Expr_memberContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 80;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 81;
						Match(T__2);
						State = 82;
						Match(NAME);
						}
						break;
					case 9:
						{
						_localctx = new Expr_subscriptContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 83;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 84;
						Match(T__3);
						State = 85;
						expr(0);
						State = 86;
						Match(T__4);
						}
						break;
					case 10:
						{
						_localctx = new Expr_func_with_callerContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 88;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 89;
						Match(T__2);
						State = 90;
						Match(NAME);
						State = 91;
						Match(T__0);
						State = 92;
						argumentlist();
						State = 93;
						Match(T__1);
						}
						break;
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Atom_exprContext : ParserRuleContext {
		public Atom_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom_expr; } }
	 
		public Atom_exprContext() { }
		public virtual void CopyFrom(Atom_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Atom_selfContext : Atom_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELF() { return GetToken(NodeParserParser.SELF, 0); }
		public Atom_selfContext(Atom_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterAtom_self(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitAtom_self(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_self(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_falseContext : Atom_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(NodeParserParser.FALSE, 0); }
		public Atom_falseContext(Atom_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterAtom_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitAtom_false(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_false(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_numberContext : Atom_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(NodeParserParser.NUMBER, 0); }
		public Atom_numberContext(Atom_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterAtom_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitAtom_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_number(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_variableContext : Atom_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(NodeParserParser.VARIABLE, 0); }
		public Atom_variableContext(Atom_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterAtom_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitAtom_variable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_variable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_trueContext : Atom_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(NodeParserParser.TRUE, 0); }
		public Atom_trueContext(Atom_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterAtom_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitAtom_true(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_true(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_nilContext : Atom_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(NodeParserParser.NIL, 0); }
		public Atom_nilContext(Atom_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterAtom_nil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitAtom_nil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_nil(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Atom_stringContext : Atom_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(NodeParserParser.STRING, 0); }
		public Atom_stringContext(Atom_exprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterAtom_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitAtom_string(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Atom_exprContext atom_expr() {
		Atom_exprContext _localctx = new Atom_exprContext(Context, State);
		EnterRule(_localctx, 4, RULE_atom_expr);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				_localctx = new Atom_numberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				Match(NUMBER);
				}
				break;
			case STRING:
				_localctx = new Atom_stringContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				Match(STRING);
				}
				break;
			case VARIABLE:
				_localctx = new Atom_variableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				Match(VARIABLE);
				}
				break;
			case TRUE:
				_localctx = new Atom_trueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 103;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new Atom_falseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 104;
				Match(FALSE);
				}
				break;
			case NIL:
				_localctx = new Atom_nilContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 105;
				Match(NIL);
				}
				break;
			case SELF:
				_localctx = new Atom_selfContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 106;
				Match(SELF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentlistContext argumentlist() {
			return GetRuleContext<ArgumentlistContext>(0);
		}
		public Container_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterContainer_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitContainer_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_exprContext container_expr() {
		Container_exprContext _localctx = new Container_exprContext(Context, State);
		EnterRule(_localctx, 6, RULE_container_expr);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				Match(T__3);
				State = 110;
				argumentlist();
				State = 111;
				Match(T__4);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113;
				Match(T__5);
				State = 114;
				argumentlist();
				State = 115;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assign_statContext : ParserRuleContext {
		public Assign_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign_stat; } }
	 
		public Assign_statContext() { }
		public virtual void CopyFrom(Assign_statContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_var_assignContext : Assign_statContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(NodeParserParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(NodeParserParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_var_assignContext(Assign_statContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_var_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_var_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_var_assign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_subscript_assignContext : Assign_statContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(NodeParserParser.ASSIGN, 0); }
		public Expr_subscript_assignContext(Assign_statContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_subscript_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_subscript_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_subscript_assign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_member_assignContext : Assign_statContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NodeParserParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(NodeParserParser.ASSIGN, 0); }
		public Expr_member_assignContext(Assign_statContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_member_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_member_assign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_member_assign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assign_statContext assign_stat() {
		Assign_statContext _localctx = new Assign_statContext(Context, State);
		EnterRule(_localctx, 8, RULE_assign_stat);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new Expr_var_assignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				Match(VARIABLE);
				State = 120;
				Match(ASSIGN);
				State = 121;
				expr(0);
				}
				break;
			case 2:
				_localctx = new Expr_member_assignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				expr(0);
				State = 123;
				Match(T__2);
				State = 124;
				Match(NAME);
				State = 125;
				Match(ASSIGN);
				State = 126;
				expr(0);
				}
				break;
			case 3:
				_localctx = new Expr_subscript_assignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 128;
				expr(0);
				State = 129;
				Match(T__3);
				State = 130;
				expr(0);
				State = 131;
				Match(T__4);
				State = 132;
				Match(ASSIGN);
				State = 133;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
	 
		public ArgumentContext() { }
		public virtual void CopyFrom(ArgumentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_named_argContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(NodeParserParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(NodeParserParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_named_argContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_named_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_named_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_named_arg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_argContext : ArgumentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_argContext(ArgumentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterExpr_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitExpr_arg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_arg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 10, RULE_argument);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new Expr_argContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 137;
				expr(0);
				}
				break;
			case 2:
				_localctx = new Expr_named_argContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 138;
				Match(NAME);
				State = 139;
				Match(ASSIGN);
				State = 140;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentlistContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentlist; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterArgumentlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitArgumentlist(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentlistContext argumentlist() {
		ArgumentlistContext _localctx = new ArgumentlistContext(Context, State);
		EnterRule(_localctx, 12, RULE_argumentlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__5) | (1L << T__8) | (1L << T__9) | (1L << TRUE) | (1L << FALSE) | (1L << NIL) | (1L << SELF) | (1L << TILDE) | (1L << SUB) | (1L << NAME) | (1L << VARIABLE) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 143;
				argument();
				}
			}

			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 146;
				Match(T__7);
				State = 147;
				argument();
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorUnaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(NodeParserParser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(NodeParserParser.TILDE, 0); }
		public OperatorUnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorUnary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitOperatorUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorUnaryContext operatorUnary() {
		OperatorUnaryContext _localctx = new OperatorUnaryContext(Context, State);
		EnterRule(_localctx, 14, RULE_operatorUnary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << TILDE) | (1L << SUB))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorMulDivModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(NodeParserParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(NodeParserParser.DIV, 0); }
		public OperatorMulDivModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorMulDivMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitOperatorMulDivMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorMulDivModContext operatorMulDivMod() {
		OperatorMulDivModContext _localctx = new OperatorMulDivModContext(Context, State);
		EnterRule(_localctx, 16, RULE_operatorMulDivMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__10) | (1L << T__11) | (1L << MUL) | (1L << DIV))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAddSubContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(NodeParserParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(NodeParserParser.SUB, 0); }
		public OperatorAddSubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAddSub; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitOperatorAddSub(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAddSubContext operatorAddSub() {
		OperatorAddSubContext _localctx = new OperatorAddSubContext(Context, State);
		EnterRule(_localctx, 18, RULE_operatorAddSub);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==SUB) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorStrcatContext : ParserRuleContext {
		public OperatorStrcatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorStrcat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitOperatorStrcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorStrcat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorStrcatContext operatorStrcat() {
		OperatorStrcatContext _localctx = new OperatorStrcatContext(Context, State);
		EnterRule(_localctx, 20, RULE_operatorStrcat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorBitwiseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(NodeParserParser.TILDE, 0); }
		public OperatorBitwiseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorBitwise; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitOperatorBitwise(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorBitwiseContext operatorBitwise() {
		OperatorBitwiseContext _localctx = new OperatorBitwiseContext(Context, State);
		EnterRule(_localctx, 22, RULE_operatorBitwise);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << TILDE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(NodeParserParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(NodeParserParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(NodeParserParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(NodeParserParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(NodeParserParser.EQUAL, 0); }
		public OperatorComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorComparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitOperatorComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorComparisonContext operatorComparison() {
		OperatorComparisonContext _localctx = new OperatorComparisonContext(Context, State);
		EnterRule(_localctx, 24, RULE_operatorComparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__17) | (1L << T__18) | (1L << GT) | (1L << LT) | (1L << EQUAL) | (1L << LE) | (1L << GE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorAndContext : ParserRuleContext {
		public OperatorAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorAnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitOperatorAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorAndContext operatorAnd() {
		OperatorAndContext _localctx = new OperatorAndContext(Context, State);
		EnterRule(_localctx, 26, RULE_operatorAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==T__20) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorOrContext : ParserRuleContext {
		public OperatorOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorOr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.EnterOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INodeParserListener typedListener = listener as INodeParserListener;
			if (typedListener != null) typedListener.ExitOperatorOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INodeParserVisitor<TResult> typedVisitor = visitor as INodeParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorOrContext operatorOr() {
		OperatorOrContext _localctx = new OperatorOrContext(Context, State);
		EnterRule(_localctx, 28, RULE_operatorOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_la = TokenStream.LA(1);
			if ( !(_la==T__21 || _la==T__22) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,54,170,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,3,0,33,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,3,1,51,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,96,8,1,10,1,
		12,1,99,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,108,8,2,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,1,3,3,3,118,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,3,4,136,8,4,1,5,1,5,1,5,1,5,3,5,142,8,5,1,6,3,6,145,
		8,6,1,6,1,6,5,6,149,8,6,10,6,12,6,152,9,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
		1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,0,1,2,15,0,2,4,6,8,10,
		12,14,16,18,20,22,24,26,28,0,7,3,0,9,10,32,32,42,42,2,0,11,12,43,44,1,
		0,41,42,2,0,14,17,32,32,3,0,18,19,29,30,35,37,1,0,20,21,1,0,22,23,182,
		0,32,1,0,0,0,2,50,1,0,0,0,4,107,1,0,0,0,6,117,1,0,0,0,8,135,1,0,0,0,10,
		141,1,0,0,0,12,144,1,0,0,0,14,153,1,0,0,0,16,155,1,0,0,0,18,157,1,0,0,
		0,20,159,1,0,0,0,22,161,1,0,0,0,24,163,1,0,0,0,26,165,1,0,0,0,28,167,1,
		0,0,0,30,33,3,8,4,0,31,33,3,2,1,0,32,30,1,0,0,0,32,31,1,0,0,0,33,1,1,0,
		0,0,34,35,6,1,-1,0,35,51,3,4,2,0,36,51,5,45,0,0,37,51,3,6,3,0,38,39,5,
		1,0,0,39,40,3,2,1,0,40,41,5,2,0,0,41,51,1,0,0,0,42,43,5,45,0,0,43,44,5,
		1,0,0,44,45,3,12,6,0,45,46,5,2,0,0,46,51,1,0,0,0,47,48,3,14,7,0,48,49,
		3,2,1,8,49,51,1,0,0,0,50,34,1,0,0,0,50,36,1,0,0,0,50,37,1,0,0,0,50,38,
		1,0,0,0,50,42,1,0,0,0,50,47,1,0,0,0,51,97,1,0,0,0,52,53,10,7,0,0,53,54,
		3,16,8,0,54,55,3,2,1,8,55,96,1,0,0,0,56,57,10,6,0,0,57,58,3,18,9,0,58,
		59,3,2,1,7,59,96,1,0,0,0,60,61,10,5,0,0,61,62,3,24,12,0,62,63,3,2,1,6,
		63,96,1,0,0,0,64,65,10,4,0,0,65,66,3,20,10,0,66,67,3,2,1,5,67,96,1,0,0,
		0,68,69,10,3,0,0,69,70,3,26,13,0,70,71,3,2,1,4,71,96,1,0,0,0,72,73,10,
		2,0,0,73,74,3,28,14,0,74,75,3,2,1,3,75,96,1,0,0,0,76,77,10,1,0,0,77,78,
		3,22,11,0,78,79,3,2,1,2,79,96,1,0,0,0,80,81,10,12,0,0,81,82,5,3,0,0,82,
		96,5,45,0,0,83,84,10,11,0,0,84,85,5,4,0,0,85,86,3,2,1,0,86,87,5,5,0,0,
		87,96,1,0,0,0,88,89,10,9,0,0,89,90,5,3,0,0,90,91,5,45,0,0,91,92,5,1,0,
		0,92,93,3,12,6,0,93,94,5,2,0,0,94,96,1,0,0,0,95,52,1,0,0,0,95,56,1,0,0,
		0,95,60,1,0,0,0,95,64,1,0,0,0,95,68,1,0,0,0,95,72,1,0,0,0,95,76,1,0,0,
		0,95,80,1,0,0,0,95,83,1,0,0,0,95,88,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,
		0,97,98,1,0,0,0,98,3,1,0,0,0,99,97,1,0,0,0,100,108,5,48,0,0,101,108,5,
		47,0,0,102,108,5,46,0,0,103,108,5,24,0,0,104,108,5,25,0,0,105,108,5,26,
		0,0,106,108,5,27,0,0,107,100,1,0,0,0,107,101,1,0,0,0,107,102,1,0,0,0,107,
		103,1,0,0,0,107,104,1,0,0,0,107,105,1,0,0,0,107,106,1,0,0,0,108,5,1,0,
		0,0,109,110,5,4,0,0,110,111,3,12,6,0,111,112,5,5,0,0,112,118,1,0,0,0,113,
		114,5,6,0,0,114,115,3,12,6,0,115,116,5,7,0,0,116,118,1,0,0,0,117,109,1,
		0,0,0,117,113,1,0,0,0,118,7,1,0,0,0,119,120,5,46,0,0,120,121,5,28,0,0,
		121,136,3,2,1,0,122,123,3,2,1,0,123,124,5,3,0,0,124,125,5,45,0,0,125,126,
		5,28,0,0,126,127,3,2,1,0,127,136,1,0,0,0,128,129,3,2,1,0,129,130,5,4,0,
		0,130,131,3,2,1,0,131,132,5,5,0,0,132,133,5,28,0,0,133,134,3,2,1,0,134,
		136,1,0,0,0,135,119,1,0,0,0,135,122,1,0,0,0,135,128,1,0,0,0,136,9,1,0,
		0,0,137,142,3,2,1,0,138,139,5,45,0,0,139,140,5,28,0,0,140,142,3,2,1,0,
		141,137,1,0,0,0,141,138,1,0,0,0,142,11,1,0,0,0,143,145,3,10,5,0,144,143,
		1,0,0,0,144,145,1,0,0,0,145,150,1,0,0,0,146,147,5,8,0,0,147,149,3,10,5,
		0,148,146,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,
		13,1,0,0,0,152,150,1,0,0,0,153,154,7,0,0,0,154,15,1,0,0,0,155,156,7,1,
		0,0,156,17,1,0,0,0,157,158,7,2,0,0,158,19,1,0,0,0,159,160,5,13,0,0,160,
		21,1,0,0,0,161,162,7,3,0,0,162,23,1,0,0,0,163,164,7,4,0,0,164,25,1,0,0,
		0,165,166,7,5,0,0,166,27,1,0,0,0,167,168,7,6,0,0,168,29,1,0,0,0,10,32,
		50,95,97,107,117,135,141,144,150
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FlowChart.Parser.NodeParser
